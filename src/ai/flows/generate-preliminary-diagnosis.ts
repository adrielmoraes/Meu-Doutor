'use server';
/**
 * @fileOverview AI flow for generating a preliminary diagnosis based on patient data.
 *
 * - generatePreliminaryDiagnosis - Function to generate a preliminary diagnosis.
 * - GeneratePreliminaryDiagnosisInput - Input type for the function.
 * - GeneratePreliminaryDiagnosisOutput - Output type for the function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GeneratePreliminaryDiagnosisInputSchema = z.object({
  examResults: z
    .string()
    .describe('The results of the medical exams as a single string.'),
  patientHistory: z
    .string()
    .describe('The patient medical history as a single string.'),
});
export type GeneratePreliminaryDiagnosisInput = z.infer<
  typeof GeneratePreliminaryDiagnosisInputSchema
>;

const GeneratePreliminaryDiagnosisOutputSchema = z.object({
  diagnosis: z.string().describe('The preliminary diagnosis generated by AI.'),
  suggestions: z
    .string()
    .describe('Suggestions for next steps and further tests.'),
});
export type GeneratePreliminaryDiagnosisOutput = z.infer<
  typeof GeneratePreliminaryDiagnosisOutputSchema
>;

export async function generatePreliminaryDiagnosis(
  input: GeneratePreliminaryDiagnosisInput
): Promise<GeneratePreliminaryDiagnosisOutput> {
  return generatePreliminaryDiagnosisFlow(input);
}

const knowledgeBaseTool = ai.defineTool({
  name: 'medicalKnowledgeBase',
  description: 'Retrieves relevant medical information from a validated knowledge base.',
  inputSchema: z.object({
    query: z.string().describe('The medical query to search for.'),
  }),
  outputSchema: z.string().describe('The medical knowledge from the knowledge base'),
},
async (input) => {
  // TODO: Implement the actual knowledge base retrieval here.
  // This is just a placeholder. Replace with actual data retrieval logic.
  return `Mock knowledge base result for: ${input.query}`;
});

const prompt = ai.definePrompt({
  name: 'generatePreliminaryDiagnosisPrompt',
  input: {schema: GeneratePreliminaryDiagnosisInputSchema},
  output: {schema: GeneratePreliminaryDiagnosisOutputSchema},
  tools: [knowledgeBaseTool],
  prompt: `You are an AI assistant helping doctors to generate preliminary diagnoses.

  Based on the patient's exam results:
  {{examResults}}

  and patient history:
  {{patientHistory}}

  generate a preliminary diagnosis. Use the medicalKnowledgeBase tool to inform your diagnosis.

  Also, suggest next steps and further tests that might be needed.
  Return the diagnosis and the suggestions in the following format:
  Diagnosis: [preliminary diagnosis]
  Suggestions: [next steps and tests] `,
});

const generatePreliminaryDiagnosisFlow = ai.defineFlow(
  {
    name: 'generatePreliminaryDiagnosisFlow',
    inputSchema: GeneratePreliminaryDiagnosisInputSchema,
    outputSchema: GeneratePreliminaryDiagnosisOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
